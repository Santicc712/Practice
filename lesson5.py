# К счастью, Python позволяет создавать функции для удаления дублирования.
# Вот пример:
# Ключевой особенностью этой программы является оператор def.
# Этот оператор def (сокращение от define) начинает определение функции.

a = 23
b = -23

# Теперь мы можем создавать новые функции ( def ) за def следует имя функции absolute_value.
# Далее идет '(', за которой следует параметр n (n передается из программы в функцию при ее вызове).


def absolute_value(n):  # Утверждения после ':' выполняются при использовании функции.
    if n < 0:
        n = -n
        return n                 # Оператор return возвращает значение туда, откуда была вызвана функция.

# Выражения продолжаются до тех пор, пока не закончится отступ или не будет встречен оператор return.


if absolute_value(a) == absolute_value(b):
    print("Абсолютные значения", a, "и", b, "равны")
else:
    print("Абсолютные значения", a, "и", b, "различны")

################################################################################

# Функции можно использовать для повторения задач, которые не возвращают значения.
# Вот несколько примеров:


def hello():
    print("Qq")


def area(width, height):
    return width * height


def print_welcome(name):
    print("Welcome", name)


hello()    # Обратите внимание, что вы можете использовать как отсутствие аргументов, так и два аргумента или более.
hello()

print_welcome("Фpeд")
w = 4
h = 5
print("ширина = ", w, 'высота = ', h, 'площадь = ', area(w, h))


# Еще одна вещь, на которую следует обратить внимание - это ошибка NameError, возникающая в конце.
# Она возникает, поскольку переменная больше не существует после завершения.
# Все локальные переменные удаляются при выходе из функции.
# Локальная переменная, скрывавшая глобальную переменную, исчезает.
# Если вы хотите получить что-то из функции, то вам придется использовать return

